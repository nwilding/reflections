What happens when you initialize a repository? Why do you need to do it?
    Initializing a repository creates a .git folder. No commits are yet made, and no files are yet added to the repository. This needs to be done to start tracking a project using the git versioning system.
How is the staging area different rom the working directory and the repository? What value do you think it offers?
    The staging area is a place where you can prepare the files that will be added to a commit. It offers a sandbox that can have files added or removed to prepare a commit that represents one logical change.
How can you use the staging area to make sure you have one commit per logical change?
    The staging area can be used to add only the files which were modified in the completion of the logical change to a commit, omitting those files which may have unrelated changes.
What are some situations when branches would be helpful in keeping your history organized? How would branches help?
    Branching helps keep the history organized by allowing a copy ofthe master code froma point in time within which you can make significant changes without impacting the work going on in the master branch. If the changes work out, the branch can be merged back into the master branch (trunk in SVN).
How do the diagrams help you visualize the branch structure?
    A diagram helps visualize the branch structure by showing which commits the branches stem from, and what the common ancestors of the branches are. It also shows how making changes to an earlier checkout, without naming the branch can mean that you'll only be able to access those changes if you recall the commit ID, as there is no parent branch name to follow.
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
    Merging two branches together automatically deletes all changes that were deleted in either branch from the original divergence branch, and adds changes made in either branch since the original divergence branch. The log of the merged branches shows the logs of each branch individually. We can use 'git show' on a commit to see just the changes between that commit and its parent.
What are the pros and cons of Git's automatic merging vs. always doing merges manually?
    Manually merging files is a good way to ensure that the correct content is in the merged output, however it can be very time consuming. Git's automatic merging is able to use some rule to automate the merges that don't have conflicts, and to ask the user to resolve the merges that do have conflicts. There by speeding up the merge process, and having the benefit of manual merges when Git doesn't know how to resolve the conflict.

